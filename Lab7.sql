DROP DATABASE IF EXISTS DBMS;
CREATE DATABASE IF NOT EXISTS DBMS;
USE DBMS;

-- Question 1

CREATE TABLE EMP (
    EMPNO NUMERIC(6) PRIMARY KEY,
    ENAME VARCHAR(20),
    JOB VARCHAR(10),
    DEPTNO NUMERIC(3),
    SAL NUMERIC(7,2)
);

CREATE TABLE DEPT (
    DEPTNO NUMERIC(2) PRIMARY KEY,
    DNAME VARCHAR(10),
    LOC VARCHAR(100)
);

-- Insert values into EMP table
INSERT INTO EMP (EMPNO, ENAME, JOB, DEPTNO, SAL)
VALUES (1, 'John Doe', 'Manager', 10, 5000.00);

INSERT INTO EMP (EMPNO, ENAME, JOB, DEPTNO, SAL)
VALUES (2, 'Jane Smith', 'Analyst', 20, 4000.00);

INSERT INTO EMP (EMPNO, ENAME, JOB, DEPTNO, SAL)
VALUES (3, 'Mike Johnson', 'Developer', 10, 4500.00);

INSERT INTO EMP (EMPNO, ENAME, JOB, DEPTNO, SAL)
VALUES (4, 'Emily Brown', 'Designer', 30, 3500.00);

INSERT INTO EMP (EMPNO, ENAME, JOB, DEPTNO, SAL)
VALUES (5, 'David Lee', 'Tester', 20, 3000.00);

-- Insert values into DEPT table
INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES (10, 'HR', 'New York');

INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES (20, 'IT', 'San Francisco');

INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES (30, 'Marketing', 'Chicago');

INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES (40, 'Finance', 'London');

INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES (50, 'Operations', 'Tokyo');


-- 1)

DELIMITER //

CREATE PROCEDURE display_EMP(IN eno INT)
BEGIN
SELECT * FROM EMP
WHERE EMP.EMPNO = eno;
END; //

DELIMITER ;

CALL display_EMP(2);

-- 2)

DELIMITER //

CREATE PROCEDURE add_EMP(IN EMPNO INT, IN ENAME TEXT, IN JOB TEXT, IN DEPTNO INT, IN SAL INT)
BEGIN
INSERT INTO EMP VALUES(EMPNO, ENAME, JOB, DEPTNO, SAL);
END; //

DELIMITER ;

CALL add_EMP(6, 'EVR DAS', 'Drug Mafia', 20, 3130.69);

SELECT * FROM EMP;


-- 3)

DELIMITER //

CREATE PROCEDURE raise_SAL(IN eno INT, IN INCREMENT INT)
BEGIN
UPDATE EMP SET SAL=SAL+INCREMENT
WHERE EMPNO = eno;
END; //

DELIMITER ;

CALL raise_SAL(6, 69);

SELECT * FROM EMP;


-- 4)

DELIMITER //

CREATE PROCEDURE DELETE_EMP(IN eno INT)
BEGIN
DELETE FROM EMP
WHERE EMPNO = eno;
END; //

DELIMITER ;

CALL DELETE_EMP(6);

SELECT * FROM EMP;


-- 5)

DELIMITER //

CREATE FUNCTION min_SAL () RETURNS INT DETERMINISTIC
BEGIN
DECLARE x INT;
SELECT MIN(SAL) FROM EMP INTO x;
RETURN x;
END; //

DELIMITER ;

SELECT min_SAL();


-- 6)

DELIMITER //

CREATE FUNCTION no_of_EMP() RETURNS INT DETERMINISTIC
BEGIN
DECLARE x INT;
SELECT COUNT(EMPNO) FROM EMP INTO x;
RETURN x;
END;//

DELIMITER ;

SELECT no_of_EMP();


-- 7)

DELIMITER //

CREATE FUNCTION sal_of_EMP(eno INT) RETURNS INT DETERMINISTIC
BEGIN
DECLARE x INT;
SELECT SAL 
FROM EMP 
WHERE EMPNO = eno
INTO x;
RETURN x;
END;//

DELIMITER ;

SELECT sal_of_EMP(5);


-- 8)

DELIMITER //

CREATE FUNCTION average(depno INT) RETURNS INT DETERMINISTIC
BEGIN
DECLARE x INT;
SELECT AVG(SAL)
FROM EMP
WHERE DEPTNO = depno
INTO x;
RETURN x;
END;//

DELIMITER ;

SELECT average(10);

-- 9)

DELIMITER //

CREATE PROCEDURE list_emps (dep INT)
BEGIN
DECLARE x TEXT;
SELECT ENAME
FROM EMP
WHERE DEPTNO = dep;
END;//

DELIMITER ;

CALL list_emps(10);


-- 10)

DELIMITER //

CREATE PROCEDURE dept_highest(IN dep INT)
BEGIN
SELECT MAX(sal) from EMP
WHERE deptno=dep;
END;
//

CREATE PROCEDURE high_sal()
BEGIN
DECLARE i INT DEFAULT 10;
WHILE i <= 40 DO
    CALL dept_highest(i);
    SET i = i + 10;
END WHILE;
END;
//

DELIMITER ;

CALL high_sal();


-- 11)

DELIMITER //

CREATE FUNCTION list_emps_sal () RETURNS INT DETERMINISTIC BEGIN
DECLARE vari INT; 
SELECT COUNT(empno) FROM EMP WHERE sal>3000 INTO vari;
RETURN vari; 
END;//

DELIMITER ;

SELECT list_emps_sal();

-- 12)

DELIMITER //

CREATE FUNCTION list_emps_mum () RETURNS INT DETERMINISTIC
BEGIN
DECLARE x INT;
SELECT COUNT(EMPNO)
FROM EMP
INNER JOIN DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO AND DEPT.LOC = 'San Francisco'
INTO x;
RETURN x;
END;//

DELIMITER ;

SELECT list_emps_mum();
